{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 60, "column": 0}, "map": {"version":3,"sources":["file:///home/laflame/Documents/School-Git/mongo/task3/src/utils/mongo.ts"],"sourcesContent":["import { MongoClient } from \"mongodb\";\n\nconst uri = process.env.MONGODB_URI || \"mongodb://localhost:27017\";\nconst client = new MongoClient(uri);\nconst db = client.db(\"blog\");\n\nexport default db;"],"names":[],"mappings":";;;AAAA;;AAEA,MAAM,MAAM,QAAQ,GAAG,CAAC,WAAW,IAAI;AACvC,MAAM,SAAS,IAAI,uGAAA,CAAA,cAAW,CAAC;AAC/B,MAAM,KAAK,OAAO,EAAE,CAAC;uCAEN","debugId":null}},
    {"offset": {"line": 75, "column": 0}, "map": {"version":3,"sources":["file:///home/laflame/Documents/School-Git/mongo/task3/src/utils/post-manager.ts"],"sourcesContent":["import { BlogEntry, BlogEntryCreationData } from \"@/models/blog\";\nimport db from \"./mongo\";\nimport { UserDetails } from \"@/models/auth\";\nimport { ObjectId } from \"mongodb\";\n\nclass PostManager {\n    async createPost(post: BlogEntryCreationData, user: UserDetails) {\n        const category = await db.collection(\"BlogCategories\").findOne({ name: post.category });\n\n        if (!category) {\n            throw new Error(\"Category not found\");\n        }\n\n        const blogEntry = await db.collection(\"BlogEntries\").insertOne({\n            ...post,\n            category: category._id,\n            author: user._id,\n            creationDate: new Date(),\n            editDates: [],\n            impressionCount: 0\n        });\n    \n        return blogEntry;\n    }\n\n    async getPost(id: ObjectId) {\n        const post = await db.collection(\"BlogEntries\").findOne({ _id: id });\n        return post as BlogEntry;\n    }\n\n    async deletePost(id: ObjectId) {\n        await db.collection(\"BlogEntries\").deleteOne({ _id: id });\n    }\n\n    async getPostsByUserId(userId: ObjectId) {\n        const posts = await db.collection(\"BlogEntries\").find({ author: userId }).toArray();\n        return posts as BlogEntry[];\n    }\n}\n\nexport default new PostManager();"],"names":[],"mappings":";;;AACA;;AAIA,MAAM;IACF,MAAM,WAAW,IAA2B,EAAE,IAAiB,EAAE;QAC7D,MAAM,WAAW,MAAM,uHAAA,CAAA,UAAE,CAAC,UAAU,CAAC,kBAAkB,OAAO,CAAC;YAAE,MAAM,KAAK,QAAQ;QAAC;QAErF,IAAI,CAAC,UAAU;YACX,MAAM,IAAI,MAAM;QACpB;QAEA,MAAM,YAAY,MAAM,uHAAA,CAAA,UAAE,CAAC,UAAU,CAAC,eAAe,SAAS,CAAC;YAC3D,GAAG,IAAI;YACP,UAAU,SAAS,GAAG;YACtB,QAAQ,KAAK,GAAG;YAChB,cAAc,IAAI;YAClB,WAAW,EAAE;YACb,iBAAiB;QACrB;QAEA,OAAO;IACX;IAEA,MAAM,QAAQ,EAAY,EAAE;QACxB,MAAM,OAAO,MAAM,uHAAA,CAAA,UAAE,CAAC,UAAU,CAAC,eAAe,OAAO,CAAC;YAAE,KAAK;QAAG;QAClE,OAAO;IACX;IAEA,MAAM,WAAW,EAAY,EAAE;QAC3B,MAAM,uHAAA,CAAA,UAAE,CAAC,UAAU,CAAC,eAAe,SAAS,CAAC;YAAE,KAAK;QAAG;IAC3D;IAEA,MAAM,iBAAiB,MAAgB,EAAE;QACrC,MAAM,QAAQ,MAAM,uHAAA,CAAA,UAAE,CAAC,UAAU,CAAC,eAAe,IAAI,CAAC;YAAE,QAAQ;QAAO,GAAG,OAAO;QACjF,OAAO;IACX;AACJ;uCAEe,IAAI","debugId":null}},
    {"offset": {"line": 131, "column": 0}, "map": {"version":3,"sources":["file:///home/laflame/Documents/School-Git/mongo/task3/src/utils/user-manager.ts"],"sourcesContent":["import { ObjectId } from \"mongodb\";\nimport db from \"./mongo\";\nimport { UserDetails } from \"@/models/auth\";\n\nclass UserManager {\n    public async getUserById(id: ObjectId) {\n        const user = await db.collection(\"users\").findOne({ _id: id });\n\n        if (!user) {\n            throw new Error(\"User not found\");\n        }\n\n        return user as UserDetails;\n    }\n\n    public async getUserByUsername(username: string) {\n        const user = await db.collection(\"users\").findOne({ username });\n\n        if (!user) {\n            throw new Error(\"User not found\");\n        }\n\n        return user as UserDetails;\n    }\n}\n\nconst userManager = new UserManager();\n\nexport default userManager;"],"names":[],"mappings":";;;AACA;;AAGA,MAAM;IACF,MAAa,YAAY,EAAY,EAAE;QACnC,MAAM,OAAO,MAAM,uHAAA,CAAA,UAAE,CAAC,UAAU,CAAC,SAAS,OAAO,CAAC;YAAE,KAAK;QAAG;QAE5D,IAAI,CAAC,MAAM;YACP,MAAM,IAAI,MAAM;QACpB;QAEA,OAAO;IACX;IAEA,MAAa,kBAAkB,QAAgB,EAAE;QAC7C,MAAM,OAAO,MAAM,uHAAA,CAAA,UAAE,CAAC,UAAU,CAAC,SAAS,OAAO,CAAC;YAAE;QAAS;QAE7D,IAAI,CAAC,MAAM;YACP,MAAM,IAAI,MAAM;QACpB;QAEA,OAAO;IACX;AACJ;AAEA,MAAM,cAAc,IAAI;uCAET","debugId":null}},
    {"offset": {"line": 164, "column": 0}, "map": {"version":3,"sources":["file:///home/laflame/Documents/School-Git/mongo/task3/src/app/api/v1/posts/%5Bid%5D/route.ts"],"sourcesContent":["import postManager from \"@/utils/post-manager\";\nimport { NextRequest, NextResponse } from \"next/server\";\nimport { ObjectId } from \"mongodb\";\nimport { BlogPostDto } from \"@/models/dtos\";\nimport userManager from \"@/utils/user-manager\";\n\nexport async function GET(request: NextRequest, { params }: { params: { id: string } }) {\n    const { id } = await params;\n    \n    try {\n        const post = await postManager.getPost(new ObjectId(id));\n\n        const author = await userManager.getUserById(post.author);\n\n        const postDto: BlogPostDto = {\n            _id: post._id!,\n            title: post.title,\n            description: post.description,\n            author: {\n                _id: author._id!,\n                username: author.username,\n                name: author.name\n            },\n            creationDate: post.creationDate,\n            editDates: post.editDates,\n            impressionCount: post.impressionCount,\n            content: post.content,\n            commentsAllowed: post.commentsAllowed\n        }\n\n        return NextResponse.json(postDto, { status: 200 });\n    } catch (error) {\n        return NextResponse.json({ error: \"Post not found\" }, { status: 404 });\n    }\n}\n\nexport async function DELETE(request: NextRequest, { params }: { params: { id: string } }) {\n    const { id } = await params;\n\n    try {\n        await postManager.deletePost(new ObjectId(id));\n        return NextResponse.json({ message: \"Post deleted\" }, { status: 200 });\n    } catch (error) {\n        return NextResponse.json({ error: \"Post not found\" }, { status: 404 });\n    }\n}"],"names":[],"mappings":";;;;AAAA;AACA;AACA;AAEA;;;;;AAEO,eAAe,IAAI,OAAoB,EAAE,EAAE,MAAM,EAA8B;IAClF,MAAM,EAAE,EAAE,EAAE,GAAG,MAAM;IAErB,IAAI;QACA,MAAM,OAAO,MAAM,iIAAA,CAAA,UAAW,CAAC,OAAO,CAAC,IAAI,uGAAA,CAAA,WAAQ,CAAC;QAEpD,MAAM,SAAS,MAAM,iIAAA,CAAA,UAAW,CAAC,WAAW,CAAC,KAAK,MAAM;QAExD,MAAM,UAAuB;YACzB,KAAK,KAAK,GAAG;YACb,OAAO,KAAK,KAAK;YACjB,aAAa,KAAK,WAAW;YAC7B,QAAQ;gBACJ,KAAK,OAAO,GAAG;gBACf,UAAU,OAAO,QAAQ;gBACzB,MAAM,OAAO,IAAI;YACrB;YACA,cAAc,KAAK,YAAY;YAC/B,WAAW,KAAK,SAAS;YACzB,iBAAiB,KAAK,eAAe;YACrC,SAAS,KAAK,OAAO;YACrB,iBAAiB,KAAK,eAAe;QACzC;QAEA,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC,SAAS;YAAE,QAAQ;QAAI;IACpD,EAAE,OAAO,OAAO;QACZ,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,OAAO;QAAiB,GAAG;YAAE,QAAQ;QAAI;IACxE;AACJ;AAEO,eAAe,OAAO,OAAoB,EAAE,EAAE,MAAM,EAA8B;IACrF,MAAM,EAAE,EAAE,EAAE,GAAG,MAAM;IAErB,IAAI;QACA,MAAM,iIAAA,CAAA,UAAW,CAAC,UAAU,CAAC,IAAI,uGAAA,CAAA,WAAQ,CAAC;QAC1C,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,SAAS;QAAe,GAAG;YAAE,QAAQ;QAAI;IACxE,EAAE,OAAO,OAAO;QACZ,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,OAAO;QAAiB,GAAG;YAAE,QAAQ;QAAI;IACxE;AACJ","debugId":null}}]
}
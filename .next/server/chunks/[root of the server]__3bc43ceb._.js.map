{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 68, "column": 0}, "map": {"version":3,"sources":["file:///home/laflame/Documents/School-Git/mongo/task3/src/utils/mongo.ts"],"sourcesContent":["import { MongoClient } from \"mongodb\";\n\nconst uri = process.env.MONGODB_URI || \"mongodb://localhost:27017\";\nconst client = new MongoClient(uri);\nconst db = client.db(\"blog\");\n\nexport default db;"],"names":[],"mappings":";;;AAAA;;AAEA,MAAM,MAAM,QAAQ,GAAG,CAAC,WAAW,IAAI;AACvC,MAAM,SAAS,IAAI,uGAAA,CAAA,cAAW,CAAC;AAC/B,MAAM,KAAK,OAAO,EAAE,CAAC;uCAEN","debugId":null}},
    {"offset": {"line": 91, "column": 0}, "map": {"version":3,"sources":["file:///home/laflame/Documents/School-Git/mongo/task3/src/utils/auth.ts"],"sourcesContent":["import { UserCreationData, UserDetails } from \"@/models/auth\";\nimport db from \"./mongo\";\nimport { createHash } from \"crypto\";\n\nclass AuthManager {\n    async addUser(user: UserCreationData) {\n        const hash = createHash(\"sha256\").update(user.password).digest(\"hex\");\n\n        await db.collection(\"users\").insertOne({ username: user.username, password: hash, email: user.email, name: user.name, isVerified: false });\n    }\n\n    async verifyUserAccount(username: string) {\n        await db.collection(\"users\").updateOne({ username }, { $set: { isVerified: true } });\n    }\n\n    async verifyUser(username: string, password: string) {\n        const user = await db.collection(\"users\").findOne({ username });\n\n        if (!user) {\n            return false;\n        }\n\n        const hash = createHash(\"sha256\").update(password).digest(\"hex\");\n\n        return user.password === hash;\n    }\n\n    async getUserDetails(username: string) : Promise<UserDetails | null> {\n        return await db.collection(\"users\").findOne({ username }, { projection: { password: 0 } }) as UserDetails | null;\n    }\n}\n\nexport default new AuthManager();"],"names":[],"mappings":";;;AACA;AACA;;;AAEA,MAAM;IACF,MAAM,QAAQ,IAAsB,EAAE;QAClC,MAAM,OAAO,CAAA,GAAA,qGAAA,CAAA,aAAU,AAAD,EAAE,UAAU,MAAM,CAAC,KAAK,QAAQ,EAAE,MAAM,CAAC;QAE/D,MAAM,uHAAA,CAAA,UAAE,CAAC,UAAU,CAAC,SAAS,SAAS,CAAC;YAAE,UAAU,KAAK,QAAQ;YAAE,UAAU;YAAM,OAAO,KAAK,KAAK;YAAE,MAAM,KAAK,IAAI;YAAE,YAAY;QAAM;IAC5I;IAEA,MAAM,kBAAkB,QAAgB,EAAE;QACtC,MAAM,uHAAA,CAAA,UAAE,CAAC,UAAU,CAAC,SAAS,SAAS,CAAC;YAAE;QAAS,GAAG;YAAE,MAAM;gBAAE,YAAY;YAAK;QAAE;IACtF;IAEA,MAAM,WAAW,QAAgB,EAAE,QAAgB,EAAE;QACjD,MAAM,OAAO,MAAM,uHAAA,CAAA,UAAE,CAAC,UAAU,CAAC,SAAS,OAAO,CAAC;YAAE;QAAS;QAE7D,IAAI,CAAC,MAAM;YACP,OAAO;QACX;QAEA,MAAM,OAAO,CAAA,GAAA,qGAAA,CAAA,aAAU,AAAD,EAAE,UAAU,MAAM,CAAC,UAAU,MAAM,CAAC;QAE1D,OAAO,KAAK,QAAQ,KAAK;IAC7B;IAEA,MAAM,eAAe,QAAgB,EAAgC;QACjE,OAAO,MAAM,uHAAA,CAAA,UAAE,CAAC,UAAU,CAAC,SAAS,OAAO,CAAC;YAAE;QAAS,GAAG;YAAE,YAAY;gBAAE,UAAU;YAAE;QAAE;IAC5F;AACJ;uCAEe,IAAI","debugId":null}},
    {"offset": {"line": 145, "column": 0}, "map": {"version":3,"sources":["file:///home/laflame/Documents/School-Git/mongo/task3/src/components/mailing/VerificationTemplate.tsx"],"sourcesContent":["interface VerificationTemplateProps {\n    username: string;\n    verificationCode: string;\n}\n\nexport default function VerificationTemplate({ username, verificationCode }: VerificationTemplateProps) {\n    return (\n        <div>\n            <h1>Welcome to Rich Money Blogs, {username}!</h1>\n            <p>Please verify your email by entering the code below:</p>\n            <p className=\"text-2xl font-bold text-secondary-700 tracking-wider\">{verificationCode}</p>\n        </div>\n    );\n}"],"names":[],"mappings":";;;;;AAKe,SAAS,qBAAqB,EAAE,QAAQ,EAAE,gBAAgB,EAA6B;IAClG,qBACI,gPAAC;;0BACG,gPAAC;;oBAAG;oBAA8B;oBAAS;;;;;;;0BAC3C,gPAAC;0BAAE;;;;;;0BACH,gPAAC;gBAAE,WAAU;0BAAwD;;;;;;;;;;;;AAGjF","debugId":null}},
    {"offset": {"line": 192, "column": 0}, "map": {"version":3,"sources":["file:///home/laflame/Documents/School-Git/mongo/task3/src/utils/code-manager.ts"],"sourcesContent":["class CodeManager {\n    private codes: Map<string, string>;\n\n    constructor() {\n        this.codes = new Map();\n    }\n\n    async generateCode(username: string) {\n        const code = Math.floor(100000 + Math.random() * 900000).toString();\n        this.codes.set(username, code);\n        return code;\n    }\n\n    async verifyCode(username: string, code: string) {\n        return this.codes.get(username) === code;\n    }\n\n    async deleteCode(username: string) {\n        this.codes.delete(username);\n    }\n}\n\nexport default new CodeManager();"],"names":[],"mappings":";;;AAAA,MAAM;IACM,MAA2B;IAEnC,aAAc;QACV,IAAI,CAAC,KAAK,GAAG,IAAI;IACrB;IAEA,MAAM,aAAa,QAAgB,EAAE;QACjC,MAAM,OAAO,KAAK,KAAK,CAAC,SAAS,KAAK,MAAM,KAAK,QAAQ,QAAQ;QACjE,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,UAAU;QACzB,OAAO;IACX;IAEA,MAAM,WAAW,QAAgB,EAAE,IAAY,EAAE;QAC7C,OAAO,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,cAAc;IACxC;IAEA,MAAM,WAAW,QAAgB,EAAE;QAC/B,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC;IACtB;AACJ;uCAEe,IAAI","debugId":null}},
    {"offset": {"line": 219, "column": 0}, "map": {"version":3,"sources":["file:///home/laflame/Documents/School-Git/mongo/task3/src/utils/mailer.ts"],"sourcesContent":["import { Resend } from \"resend\";\nimport VerificationTemplate from \"@/components/mailing/VerificationTemplate\";\nimport CodeManager from \"./code-manager\";\n\nclass Mailer {\n    private resend: Resend;\n\n    constructor() {\n        this.resend = new Resend(process.env.RESEND_API_KEY);\n    }\n\n    async sendVerificationEmail(username: string, email: string) {\n        const verificationCode = await CodeManager.generateCode(username);\n\n        const { data, error } = await this.resend.emails.send({\n            from: \"Rich Money Blogs <richmoneyblogs@gmail.com>\",\n            to: email,\n            subject: \"Verification Code\",\n            react: VerificationTemplate({ username, verificationCode }),\n        });\n\n        if (error) {\n            console.error(error);\n            return false;\n        }\n\n        return true;\n    }\n}\n\nexport default new Mailer();"],"names":[],"mappings":";;;AAAA;AACA;AACA;;;;AAEA,MAAM;IACM,OAAe;IAEvB,aAAc;QACV,IAAI,CAAC,MAAM,GAAG,IAAI,0IAAA,CAAA,SAAM,CAAC,QAAQ,GAAG,CAAC,cAAc;IACvD;IAEA,MAAM,sBAAsB,QAAgB,EAAE,KAAa,EAAE;QACzD,MAAM,mBAAmB,MAAM,iIAAA,CAAA,UAAW,CAAC,YAAY,CAAC;QAExD,MAAM,EAAE,IAAI,EAAE,KAAK,EAAE,GAAG,MAAM,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC;YAClD,MAAM;YACN,IAAI;YACJ,SAAS;YACT,OAAO,CAAA,GAAA,uJAAA,CAAA,UAAoB,AAAD,EAAE;gBAAE;gBAAU;YAAiB;QAC7D;QAEA,IAAI,OAAO;YACP,QAAQ,KAAK,CAAC;YACd,OAAO;QACX;QAEA,OAAO;IACX;AACJ;uCAEe,IAAI","debugId":null}},
    {"offset": {"line": 258, "column": 0}, "map": {"version":3,"sources":["file:///home/laflame/Documents/School-Git/mongo/task3/src/app/api/auth/route.ts"],"sourcesContent":["import { MandatoryUserData, UserCreationData } from \"@/models/auth\";\nimport { NextResponse } from \"next/server\";\nimport AuthManager from \"@/utils/auth\";\nimport mailer from \"@/utils/mailer\";\n\nexport async function POST(request: Request) {\n  const mandatoryUserData: MandatoryUserData = await request.json();\n\n  const isUserVerified = await AuthManager.verifyUser(mandatoryUserData.username, mandatoryUserData.password);\n\n  if (!isUserVerified) {\n    return NextResponse.json({ error: \"Invalid username or password\" }, { status: 401 });\n  }\n\n  const userData = await AuthManager.getUserDetails(mandatoryUserData.username);\n\n  if (!userData) {\n    return NextResponse.json({ error: \"User not found\" }, { status: 404 });\n  }\n\n  const isEmailSent = await mailer.sendVerificationEmail(userData.username, userData.email);\n\n  if (!isEmailSent) {\n    return NextResponse.json({ error: \"Failed to send verification email\" }, { status: 500 });\n  }\n\n  return NextResponse.json({ message: \"Verification email sent successfully\" }, { status: 200 });\n}\n\nexport async function PUT(request: Request) {\n  const userData: UserCreationData = await request.json();\n\n  const user = await AuthManager.getUserDetails(userData.username);\n\n  if (user) {\n    return NextResponse.json({ error: \"User already exists\" }, { status: 400 });\n  }\n\n  const isEmailSent = await mailer.sendVerificationEmail(userData.username, userData.email);\n\n  if (!isEmailSent) {\n    return NextResponse.json({ error: \"Failed to send verification email\" }, { status: 500 });\n  }\n\n  return NextResponse.json({ message: \"User created successfully\" }, { status: 201 });\n}"],"names":[],"mappings":";;;;AACA;AACA;AACA;;;;AAEO,eAAe,KAAK,OAAgB;IACzC,MAAM,oBAAuC,MAAM,QAAQ,IAAI;IAE/D,MAAM,iBAAiB,MAAM,sHAAA,CAAA,UAAW,CAAC,UAAU,CAAC,kBAAkB,QAAQ,EAAE,kBAAkB,QAAQ;IAE1G,IAAI,CAAC,gBAAgB;QACnB,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,OAAO;QAA+B,GAAG;YAAE,QAAQ;QAAI;IACpF;IAEA,MAAM,WAAW,MAAM,sHAAA,CAAA,UAAW,CAAC,cAAc,CAAC,kBAAkB,QAAQ;IAE5E,IAAI,CAAC,UAAU;QACb,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,OAAO;QAAiB,GAAG;YAAE,QAAQ;QAAI;IACtE;IAEA,MAAM,cAAc,MAAM,wHAAA,CAAA,UAAM,CAAC,qBAAqB,CAAC,SAAS,QAAQ,EAAE,SAAS,KAAK;IAExF,IAAI,CAAC,aAAa;QAChB,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,OAAO;QAAoC,GAAG;YAAE,QAAQ;QAAI;IACzF;IAEA,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;QAAE,SAAS;IAAuC,GAAG;QAAE,QAAQ;IAAI;AAC9F;AAEO,eAAe,IAAI,OAAgB;IACxC,MAAM,WAA6B,MAAM,QAAQ,IAAI;IAErD,MAAM,OAAO,MAAM,sHAAA,CAAA,UAAW,CAAC,cAAc,CAAC,SAAS,QAAQ;IAE/D,IAAI,MAAM;QACR,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,OAAO;QAAsB,GAAG;YAAE,QAAQ;QAAI;IAC3E;IAEA,MAAM,cAAc,MAAM,wHAAA,CAAA,UAAM,CAAC,qBAAqB,CAAC,SAAS,QAAQ,EAAE,SAAS,KAAK;IAExF,IAAI,CAAC,aAAa;QAChB,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,OAAO;QAAoC,GAAG;YAAE,QAAQ;QAAI;IACzF;IAEA,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;QAAE,SAAS;IAA4B,GAAG;QAAE,QAAQ;IAAI;AACnF","debugId":null}}]
}
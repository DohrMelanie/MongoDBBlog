{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 68, "column": 0}, "map": {"version":3,"sources":["file:///home/laflame/Documents/School-Git/mongo/task3/src/utils/mongo.ts"],"sourcesContent":["import { MongoClient } from \"mongodb\";\n\nconst uri = process.env.MONGODB_URI || \"mongodb://localhost:27017\";\nconst client = new MongoClient(uri);\nconst db = client.db(\"blog\");\n\nexport default db;"],"names":[],"mappings":";;;AAAA;;AAEA,MAAM,MAAM,QAAQ,GAAG,CAAC,WAAW,IAAI;AACvC,MAAM,SAAS,IAAI,uGAAA,CAAA,cAAW,CAAC;AAC/B,MAAM,KAAK,OAAO,EAAE,CAAC;uCAEN","debugId":null}},
    {"offset": {"line": 83, "column": 0}, "map": {"version":3,"sources":["file:///home/laflame/Documents/School-Git/mongo/task3/src/utils/user-manager.ts"],"sourcesContent":["import { ObjectId } from \"mongodb\";\nimport db from \"./mongo\";\nimport { UserDetails } from \"@/models/auth\";\n\nclass UserManager {\n    public async getUserById(id: ObjectId) {\n        const user = await db.collection(\"users\").findOne({ _id: id });\n\n        if (!user) {\n            throw new Error(\"User not found\");\n        }\n\n        return user as UserDetails;\n    }\n\n    public async getUserByUsername(username: string) {\n        const user = await db.collection(\"users\").findOne({ username });\n\n        if (!user) {\n            throw new Error(\"User not found\");\n        }\n\n        return user as UserDetails;\n    }\n}\n\nconst userManager = new UserManager();\n\nexport default userManager;"],"names":[],"mappings":";;;AACA;;AAGA,MAAM;IACF,MAAa,YAAY,EAAY,EAAE;QACnC,MAAM,OAAO,MAAM,uHAAA,CAAA,UAAE,CAAC,UAAU,CAAC,SAAS,OAAO,CAAC;YAAE,KAAK;QAAG;QAE5D,IAAI,CAAC,MAAM;YACP,MAAM,IAAI,MAAM;QACpB;QAEA,OAAO;IACX;IAEA,MAAa,kBAAkB,QAAgB,EAAE;QAC7C,MAAM,OAAO,MAAM,uHAAA,CAAA,UAAE,CAAC,UAAU,CAAC,SAAS,OAAO,CAAC;YAAE;QAAS;QAE7D,IAAI,CAAC,MAAM;YACP,MAAM,IAAI,MAAM;QACpB;QAEA,OAAO;IACX;AACJ;AAEA,MAAM,cAAc,IAAI;uCAET","debugId":null}},
    {"offset": {"line": 116, "column": 0}, "map": {"version":3,"sources":["file:///home/laflame/Documents/School-Git/mongo/task3/src/utils/post-manager.ts"],"sourcesContent":["import { BlogEntry, BlogEntryCreationData } from \"@/models/blog\";\nimport db from \"./mongo\";\nimport { UserDetails } from \"@/models/auth\";\nimport { ObjectId } from \"mongodb\";\n\nclass PostManager {\n    async createPost(post: BlogEntryCreationData, user: UserDetails) {\n        const category = await db.collection(\"BlogCategories\").findOne({ name: post.category });\n\n        if (!category) {\n            throw new Error(\"Category not found\");\n        }\n\n        const blogEntry = await db.collection(\"BlogEntries\").insertOne({\n            ...post,\n            category: category._id,\n            author: user._id,\n            creationDate: new Date(),\n            editDates: [],\n            impressionCount: 0\n        });\n    \n        return blogEntry;\n    }\n\n    async getPost(id: ObjectId) {\n        const post = await db.collection(\"BlogEntries\").findOne({ _id: id });\n        return post as BlogEntry;\n    }\n\n    async deletePost(id: ObjectId) {\n        await db.collection(\"BlogEntries\").deleteOne({ _id: id });\n    }\n\n    async getPostsByUserId(userId: ObjectId) {\n        const posts = await db.collection(\"BlogEntries\").find({ author: userId }).toArray();\n        return posts as BlogEntry[];\n    }\n}\n\nexport default new PostManager();"],"names":[],"mappings":";;;AACA;;AAIA,MAAM;IACF,MAAM,WAAW,IAA2B,EAAE,IAAiB,EAAE;QAC7D,MAAM,WAAW,MAAM,uHAAA,CAAA,UAAE,CAAC,UAAU,CAAC,kBAAkB,OAAO,CAAC;YAAE,MAAM,KAAK,QAAQ;QAAC;QAErF,IAAI,CAAC,UAAU;YACX,MAAM,IAAI,MAAM;QACpB;QAEA,MAAM,YAAY,MAAM,uHAAA,CAAA,UAAE,CAAC,UAAU,CAAC,eAAe,SAAS,CAAC;YAC3D,GAAG,IAAI;YACP,UAAU,SAAS,GAAG;YACtB,QAAQ,KAAK,GAAG;YAChB,cAAc,IAAI;YAClB,WAAW,EAAE;YACb,iBAAiB;QACrB;QAEA,OAAO;IACX;IAEA,MAAM,QAAQ,EAAY,EAAE;QACxB,MAAM,OAAO,MAAM,uHAAA,CAAA,UAAE,CAAC,UAAU,CAAC,eAAe,OAAO,CAAC;YAAE,KAAK;QAAG;QAClE,OAAO;IACX;IAEA,MAAM,WAAW,EAAY,EAAE;QAC3B,MAAM,uHAAA,CAAA,UAAE,CAAC,UAAU,CAAC,eAAe,SAAS,CAAC;YAAE,KAAK;QAAG;IAC3D;IAEA,MAAM,iBAAiB,MAAgB,EAAE;QACrC,MAAM,QAAQ,MAAM,uHAAA,CAAA,UAAE,CAAC,UAAU,CAAC,eAAe,IAAI,CAAC;YAAE,QAAQ;QAAO,GAAG,OAAO;QACjF,OAAO;IACX;AACJ;uCAEe,IAAI","debugId":null}},
    {"offset": {"line": 164, "column": 0}, "map": {"version":3,"sources":["file:///home/laflame/Documents/School-Git/mongo/task3/src/app/api/users/%5Bid%5D/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from \"next/server\";\nimport userManager from \"@/utils/user-manager\";\nimport { ObjectId } from \"mongodb\";\nimport { PublicUserDetailsDto, PublicUserPostDetailsDto } from \"@/models/dtos\";\nimport postManager from \"@/utils/post-manager\";\n\nexport async function GET(request: NextRequest, { params }: { params: { id: string } }) {\n    const { id } = params;\n\n    const user = await userManager.getUserByUsername(id);\n\n    if (!user) {\n        return NextResponse.json({ error: \"User not found\" }, { status: 404 });\n    }\n\n    const publicUser: PublicUserDetailsDto = {\n        _id: user._id!,\n        username: user.username,\n        name: user.name,\n    }\n\n    const posts = await postManager.getPostsByUserId(user._id!);\n\n    const publicUserPostDetails: PublicUserPostDetailsDto = {\n        _id: user._id!,\n        username: user.username,\n        name: user.name,\n        posts: posts.map((post) => ({\n            _id: post._id!,\n            title: post.title,\n            description: post.description,\n            author: {\n                _id: user._id!,\n                username: user.username,\n                name: user.name,\n            },\n            creationDate: post.creationDate,\n            editDates: post.editDates,\n            impressionCount: post.impressionCount,\n            content: post.content,\n            commentsAllowed: post.commentsAllowed,\n            category: post.category,\n        })),\n    }\n\n    return NextResponse.json(publicUserPostDetails);\n}"],"names":[],"mappings":";;;AAAA;AACA;AAGA;;;;AAEO,eAAe,IAAI,OAAoB,EAAE,EAAE,MAAM,EAA8B;IAClF,MAAM,EAAE,EAAE,EAAE,GAAG;IAEf,MAAM,OAAO,MAAM,iIAAA,CAAA,UAAW,CAAC,iBAAiB,CAAC;IAEjD,IAAI,CAAC,MAAM;QACP,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,OAAO;QAAiB,GAAG;YAAE,QAAQ;QAAI;IACxE;IAEA,MAAM,aAAmC;QACrC,KAAK,KAAK,GAAG;QACb,UAAU,KAAK,QAAQ;QACvB,MAAM,KAAK,IAAI;IACnB;IAEA,MAAM,QAAQ,MAAM,iIAAA,CAAA,UAAW,CAAC,gBAAgB,CAAC,KAAK,GAAG;IAEzD,MAAM,wBAAkD;QACpD,KAAK,KAAK,GAAG;QACb,UAAU,KAAK,QAAQ;QACvB,MAAM,KAAK,IAAI;QACf,OAAO,MAAM,GAAG,CAAC,CAAC,OAAS,CAAC;gBACxB,KAAK,KAAK,GAAG;gBACb,OAAO,KAAK,KAAK;gBACjB,aAAa,KAAK,WAAW;gBAC7B,QAAQ;oBACJ,KAAK,KAAK,GAAG;oBACb,UAAU,KAAK,QAAQ;oBACvB,MAAM,KAAK,IAAI;gBACnB;gBACA,cAAc,KAAK,YAAY;gBAC/B,WAAW,KAAK,SAAS;gBACzB,iBAAiB,KAAK,eAAe;gBACrC,SAAS,KAAK,OAAO;gBACrB,iBAAiB,KAAK,eAAe;gBACrC,UAAU,KAAK,QAAQ;YAC3B,CAAC;IACL;IAEA,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;AAC7B","debugId":null}}]
}
{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 92, "column": 0}, "map": {"version":3,"sources":["file:///home/laflame/Documents/School-Git/mongo/task3/src/utils/token-manager.ts"],"sourcesContent":["import jwt from \"jsonwebtoken\";\n\nclass TokenManager {\n    async generateToken(username: string) {\n        const refreshToken = jwt.sign({ username }, process.env.JWT_SECRET || \"default-secret\", { expiresIn: \"1d\" });\n\n        return jwt.sign({ username, refreshToken }, process.env.JWT_SECRET || \"default-secret\");\n    }\n\n    async verifyToken(token: string) {\n        try {\n            return jwt.verify(token, process.env.JWT_SECRET || \"default-secret\");\n        } catch (error) {\n            return false;\n        }\n    }\n\n    async getUserFromToken(token: string) {\n        const decoded = jwt.verify(token, process.env.JWT_SECRET || \"default-secret\");\n\n        if (typeof decoded === \"string\") {\n            return null;\n        }\n\n        return decoded.username;\n    }\n}\n\nexport default new TokenManager();"],"names":[],"mappings":";;;AAAA;;AAEA,MAAM;IACF,MAAM,cAAc,QAAgB,EAAE;QAClC,MAAM,eAAe,uIAAA,CAAA,UAAG,CAAC,IAAI,CAAC;YAAE;QAAS,GAAG,QAAQ,GAAG,CAAC,UAAU,IAAI,kBAAkB;YAAE,WAAW;QAAK;QAE1G,OAAO,uIAAA,CAAA,UAAG,CAAC,IAAI,CAAC;YAAE;YAAU;QAAa,GAAG,QAAQ,GAAG,CAAC,UAAU,IAAI;IAC1E;IAEA,MAAM,YAAY,KAAa,EAAE;QAC7B,IAAI;YACA,OAAO,uIAAA,CAAA,UAAG,CAAC,MAAM,CAAC,OAAO,QAAQ,GAAG,CAAC,UAAU,IAAI;QACvD,EAAE,OAAO,OAAO;YACZ,OAAO;QACX;IACJ;IAEA,MAAM,iBAAiB,KAAa,EAAE;QAClC,MAAM,UAAU,uIAAA,CAAA,UAAG,CAAC,MAAM,CAAC,OAAO,QAAQ,GAAG,CAAC,UAAU,IAAI;QAE5D,IAAI,OAAO,YAAY,UAAU;YAC7B,OAAO;QACX;QAEA,OAAO,QAAQ,QAAQ;IAC3B;AACJ;uCAEe,IAAI","debugId":null}},
    {"offset": {"line": 139, "column": 0}, "map": {"version":3,"sources":["file:///home/laflame/Documents/School-Git/mongo/task3/src/utils/mongo.ts"],"sourcesContent":["import { MongoClient } from \"mongodb\";\n\nconst uri = process.env.MONGODB_URI || \"mongodb://localhost:27017\";\nconst client = new MongoClient(uri);\nconst db = client.db(\"blog\");\n\nexport default db;"],"names":[],"mappings":";;;AAAA;;AAEA,MAAM,MAAM,QAAQ,GAAG,CAAC,WAAW,IAAI;AACvC,MAAM,SAAS,IAAI,uGAAA,CAAA,cAAW,CAAC;AAC/B,MAAM,KAAK,OAAO,EAAE,CAAC;uCAEN","debugId":null}},
    {"offset": {"line": 154, "column": 0}, "map": {"version":3,"sources":["file:///home/laflame/Documents/School-Git/mongo/task3/src/utils/query.ts"],"sourcesContent":["import tokenManager from \"./token-manager\";\nimport db from \"./mongo\";\nimport { UserDetails } from \"@/models/auth\";\nimport { BlogEntry } from \"@/models/blog\";\nimport { ObjectId } from \"mongodb\";\n\nclass Query {\n    async getUserFromToken(token: string) : Promise<UserDetails | null> {\n        const user = await tokenManager.getUserFromToken(token);\n\n        return db.collection(\"users\").findOne({ username: user }) as unknown as UserDetails;\n    }\n\n    async getPostsByUserId(userId: ObjectId) : Promise<BlogEntry[]> {\n        return db.collection(\"BlogEntries\").find({ author: userId }).toArray() as unknown as BlogEntry[];\n    }\n}\n\nexport default new Query();"],"names":[],"mappings":";;;AAAA;AACA;;;AAKA,MAAM;IACF,MAAM,iBAAiB,KAAa,EAAgC;QAChE,MAAM,OAAO,MAAM,kIAAA,CAAA,UAAY,CAAC,gBAAgB,CAAC;QAEjD,OAAO,uHAAA,CAAA,UAAE,CAAC,UAAU,CAAC,SAAS,OAAO,CAAC;YAAE,UAAU;QAAK;IAC3D;IAEA,MAAM,iBAAiB,MAAgB,EAAyB;QAC5D,OAAO,uHAAA,CAAA,UAAE,CAAC,UAAU,CAAC,eAAe,IAAI,CAAC;YAAE,QAAQ;QAAO,GAAG,OAAO;IACxE;AACJ;uCAEe,IAAI","debugId":null}},
    {"offset": {"line": 181, "column": 0}, "map": {"version":3,"sources":["file:///home/laflame/Documents/School-Git/mongo/task3/src/utils/user-manager.ts"],"sourcesContent":["import { ObjectId } from \"mongodb\";\nimport db from \"./mongo\";\nimport { UserDetails } from \"@/models/auth\";\n\nclass UserManager {\n    public async getUserById(id: ObjectId) {\n        const user = await db.collection(\"users\").findOne({ _id: id });\n\n        if (!user) {\n            throw new Error(\"User not found\");\n        }\n\n        return user as UserDetails;\n    }\n\n    public async getUserByUsername(username: string) {\n        const user = await db.collection(\"users\").findOne({ username });\n\n        if (!user) {\n            throw new Error(\"User not found\");\n        }\n\n        return user as UserDetails;\n    }\n}\n\nconst userManager = new UserManager();\n\nexport default userManager;"],"names":[],"mappings":";;;AACA;;AAGA,MAAM;IACF,MAAa,YAAY,EAAY,EAAE;QACnC,MAAM,OAAO,MAAM,uHAAA,CAAA,UAAE,CAAC,UAAU,CAAC,SAAS,OAAO,CAAC;YAAE,KAAK;QAAG;QAE5D,IAAI,CAAC,MAAM;YACP,MAAM,IAAI,MAAM;QACpB;QAEA,OAAO;IACX;IAEA,MAAa,kBAAkB,QAAgB,EAAE;QAC7C,MAAM,OAAO,MAAM,uHAAA,CAAA,UAAE,CAAC,UAAU,CAAC,SAAS,OAAO,CAAC;YAAE;QAAS;QAE7D,IAAI,CAAC,MAAM;YACP,MAAM,IAAI,MAAM;QACpB;QAEA,OAAO;IACX;AACJ;AAEA,MAAM,cAAc,IAAI;uCAET","debugId":null}},
    {"offset": {"line": 214, "column": 0}, "map": {"version":3,"sources":["file:///home/laflame/Documents/School-Git/mongo/task3/src/utils/comment-manager.ts"],"sourcesContent":["import db from \"./mongo\";\nimport { Comment } from \"@/models/blog\";\nimport { ObjectId } from \"mongodb\";\nimport { BlogEntry } from \"@/models/blog\";\nimport userManager from \"./user-manager\";\nimport { BlogPostDto, CommentDto } from \"@/models/dtos\";\nclass CommentManager {\n    async createComment(commentParam: Comment) {\n        const comment = await db.collection(\"comments\").insertOne(commentParam);\n        return comment;\n    }\n\n    async getCommentsByPostId(postId: ObjectId) {\n        const comments = await db.collection(\"comments\").find({ blogEntry: postId }).toArray();\n\n        return comments as Comment[];\n    }\n\n    async generatePostsCommentsDto(posts: BlogEntry[]) : Promise<CommentDto[]> {\n        const postsCommentsDto = await Promise.all(posts.map(async (post) => {\n            const comments = await this.getCommentsByPostId(post._id!);\n            const commentsDto = await Promise.all(comments.map(async (comment) => {\n                const author = await userManager.getUserById(comment.author);\n                return {\n                    _id: comment._id!,\n                    text: comment.text,\n                    author: {\n                        _id: author!._id!,\n                        username: author!.username,\n                        name: author!.name\n                    },\n                    creationDate: comment.createdAt\n                }\n            }));\n\n            return commentsDto;\n        }));\n\n        return postsCommentsDto.flat();\n    }\n}\n\nexport default new CommentManager();\n"],"names":[],"mappings":";;;AAAA;AAIA;;;AAEA,MAAM;IACF,MAAM,cAAc,YAAqB,EAAE;QACvC,MAAM,UAAU,MAAM,uHAAA,CAAA,UAAE,CAAC,UAAU,CAAC,YAAY,SAAS,CAAC;QAC1D,OAAO;IACX;IAEA,MAAM,oBAAoB,MAAgB,EAAE;QACxC,MAAM,WAAW,MAAM,uHAAA,CAAA,UAAE,CAAC,UAAU,CAAC,YAAY,IAAI,CAAC;YAAE,WAAW;QAAO,GAAG,OAAO;QAEpF,OAAO;IACX;IAEA,MAAM,yBAAyB,KAAkB,EAA0B;QACvE,MAAM,mBAAmB,MAAM,QAAQ,GAAG,CAAC,MAAM,GAAG,CAAC,OAAO;YACxD,MAAM,WAAW,MAAM,IAAI,CAAC,mBAAmB,CAAC,KAAK,GAAG;YACxD,MAAM,cAAc,MAAM,QAAQ,GAAG,CAAC,SAAS,GAAG,CAAC,OAAO;gBACtD,MAAM,SAAS,MAAM,iIAAA,CAAA,UAAW,CAAC,WAAW,CAAC,QAAQ,MAAM;gBAC3D,OAAO;oBACH,KAAK,QAAQ,GAAG;oBAChB,MAAM,QAAQ,IAAI;oBAClB,QAAQ;wBACJ,KAAK,OAAQ,GAAG;wBAChB,UAAU,OAAQ,QAAQ;wBAC1B,MAAM,OAAQ,IAAI;oBACtB;oBACA,cAAc,QAAQ,SAAS;gBACnC;YACJ;YAEA,OAAO;QACX;QAEA,OAAO,iBAAiB,IAAI;IAChC;AACJ;uCAEe,IAAI","debugId":null}},
    {"offset": {"line": 260, "column": 0}, "map": {"version":3,"sources":["file:///home/laflame/Documents/School-Git/mongo/task3/src/app/api/v1/me/posts/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from \"next/server\";\nimport { cookies } from \"next/headers\";\nimport query from \"@/utils/query\";\nimport { BlogPostDto } from \"@/models/dtos\";\nimport commentManager from \"@/utils/comment-manager\";\nimport userManager from \"@/utils/user-manager\";\n\nexport async function GET(request: NextRequest) {\n    const cookieStore = await cookies();\n    const token = cookieStore.get(\"token\");\n\n    const user = await query.getUserFromToken(token!.value);\n\n    console.log(user);\n\n    const posts = await query.getPostsByUserId(user!._id!);\n    \n    const comments = await Promise.all(posts.map(async (post) => {\n        const comments = await commentManager.getCommentsByPostId(post._id!);\n        const commentsDto = await Promise.all(comments.map(async (comment) => {\n            const author = await userManager.getUserById(comment.author);\n            return {\n                _id: comment._id!,\n                text: comment.text,\n                author: {\n                    _id: author!._id!,\n                    username: author!.username,\n                    name: author!.name\n                },\n                creationDate: comment.createdAt\n            }\n        }));\n        return commentsDto;\n    }));\n\n    const postsDto: BlogPostDto[] = posts.map((post) => ({\n        _id: post._id!,\n        title: post.title,\n        description: post.description,\n        author: {\n            _id: user!._id!,\n            username: user!.username,\n            name: user!.name\n        },\n        creationDate: post.creationDate,\n        editDates: post.editDates,\n        impressionCount: post.impressionCount,\n        content: post.content,\n        commentsAllowed: post.commentsAllowed,\n        comments: comments.flat()\n    }));\n\n    return NextResponse.json(postsDto);\n}"],"names":[],"mappings":";;;AAAA;AACA;AACA;AAEA;AACA;;;;;;AAEO,eAAe,IAAI,OAAoB;IAC1C,MAAM,cAAc,MAAM,CAAA,GAAA,iIAAA,CAAA,UAAO,AAAD;IAChC,MAAM,QAAQ,YAAY,GAAG,CAAC;IAE9B,MAAM,OAAO,MAAM,uHAAA,CAAA,UAAK,CAAC,gBAAgB,CAAC,MAAO,KAAK;IAEtD,QAAQ,GAAG,CAAC;IAEZ,MAAM,QAAQ,MAAM,uHAAA,CAAA,UAAK,CAAC,gBAAgB,CAAC,KAAM,GAAG;IAEpD,MAAM,WAAW,MAAM,QAAQ,GAAG,CAAC,MAAM,GAAG,CAAC,OAAO;QAChD,MAAM,WAAW,MAAM,oIAAA,CAAA,UAAc,CAAC,mBAAmB,CAAC,KAAK,GAAG;QAClE,MAAM,cAAc,MAAM,QAAQ,GAAG,CAAC,SAAS,GAAG,CAAC,OAAO;YACtD,MAAM,SAAS,MAAM,iIAAA,CAAA,UAAW,CAAC,WAAW,CAAC,QAAQ,MAAM;YAC3D,OAAO;gBACH,KAAK,QAAQ,GAAG;gBAChB,MAAM,QAAQ,IAAI;gBAClB,QAAQ;oBACJ,KAAK,OAAQ,GAAG;oBAChB,UAAU,OAAQ,QAAQ;oBAC1B,MAAM,OAAQ,IAAI;gBACtB;gBACA,cAAc,QAAQ,SAAS;YACnC;QACJ;QACA,OAAO;IACX;IAEA,MAAM,WAA0B,MAAM,GAAG,CAAC,CAAC,OAAS,CAAC;YACjD,KAAK,KAAK,GAAG;YACb,OAAO,KAAK,KAAK;YACjB,aAAa,KAAK,WAAW;YAC7B,QAAQ;gBACJ,KAAK,KAAM,GAAG;gBACd,UAAU,KAAM,QAAQ;gBACxB,MAAM,KAAM,IAAI;YACpB;YACA,cAAc,KAAK,YAAY;YAC/B,WAAW,KAAK,SAAS;YACzB,iBAAiB,KAAK,eAAe;YACrC,SAAS,KAAK,OAAO;YACrB,iBAAiB,KAAK,eAAe;YACrC,UAAU,SAAS,IAAI;QAC3B,CAAC;IAED,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;AAC7B","debugId":null}}]
}
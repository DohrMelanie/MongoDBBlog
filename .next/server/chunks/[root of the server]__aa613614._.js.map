{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 68, "column": 0}, "map": {"version":3,"sources":["file:///home/laflame/Documents/School-Git/mongo/task3/src/utils/mongo.ts"],"sourcesContent":["import { MongoClient } from \"mongodb\";\n\nconst uri = process.env.MONGODB_URI || \"mongodb://localhost:27017\";\nconst client = new MongoClient(uri);\nconst db = client.db(\"blog\");\n\nexport default db;"],"names":[],"mappings":";;;AAAA;;AAEA,MAAM,MAAM,QAAQ,GAAG,CAAC,WAAW,IAAI;AACvC,MAAM,SAAS,IAAI,uGAAA,CAAA,cAAW,CAAC;AAC/B,MAAM,KAAK,OAAO,EAAE,CAAC;uCAEN","debugId":null}},
    {"offset": {"line": 83, "column": 0}, "map": {"version":3,"sources":["file:///home/laflame/Documents/School-Git/mongo/task3/src/utils/post-manager.ts"],"sourcesContent":["import { BlogEntryCreationData } from \"@/models/blog\";\nimport db from \"./mongo\";\nimport { UserDetails } from \"@/models/auth\";\nimport { ObjectId } from \"mongodb\";\n\nclass PostManager {\n    async createPost(post: BlogEntryCreationData, user: UserDetails) {\n        const category = await db.collection(\"BlogCategories\").findOne({ name: post.category });\n\n        if (!category) {\n            throw new Error(\"Category not found\");\n        }\n\n        const blogEntry = await db.collection(\"BlogEntries\").insertOne({\n            ...post,\n            category: category._id,\n            author: user._id,\n            creationDate: new Date(),\n            editDates: [],\n            impressionCount: 0\n        });\n    \n        return blogEntry;\n    }\n\n    async getPost(id: string) {\n        const post = await db.collection(\"BlogEntries\").findOne({ _id: new ObjectId(id) });\n        return post;\n    }\n}\n\nexport default new PostManager();"],"names":[],"mappings":";;;AACA;AAEA;;;AAEA,MAAM;IACF,MAAM,WAAW,IAA2B,EAAE,IAAiB,EAAE;QAC7D,MAAM,WAAW,MAAM,uHAAA,CAAA,UAAE,CAAC,UAAU,CAAC,kBAAkB,OAAO,CAAC;YAAE,MAAM,KAAK,QAAQ;QAAC;QAErF,IAAI,CAAC,UAAU;YACX,MAAM,IAAI,MAAM;QACpB;QAEA,MAAM,YAAY,MAAM,uHAAA,CAAA,UAAE,CAAC,UAAU,CAAC,eAAe,SAAS,CAAC;YAC3D,GAAG,IAAI;YACP,UAAU,SAAS,GAAG;YACtB,QAAQ,KAAK,GAAG;YAChB,cAAc,IAAI;YAClB,WAAW,EAAE;YACb,iBAAiB;QACrB;QAEA,OAAO;IACX;IAEA,MAAM,QAAQ,EAAU,EAAE;QACtB,MAAM,OAAO,MAAM,uHAAA,CAAA,UAAE,CAAC,UAAU,CAAC,eAAe,OAAO,CAAC;YAAE,KAAK,IAAI,uGAAA,CAAA,WAAQ,CAAC;QAAI;QAChF,OAAO;IACX;AACJ;uCAEe,IAAI","debugId":null}},
    {"offset": {"line": 154, "column": 0}, "map": {"version":3,"sources":["file:///home/laflame/Documents/School-Git/mongo/task3/src/utils/token-manager.ts"],"sourcesContent":["import jwt from \"jsonwebtoken\";\n\nclass TokenManager {\n    async generateToken(username: string) {\n        const refreshToken = jwt.sign({ username }, process.env.JWT_SECRET || \"default-secret\", { expiresIn: \"1d\" });\n\n        return jwt.sign({ username, refreshToken }, process.env.JWT_SECRET || \"default-secret\");\n    }\n\n    async verifyToken(token: string) {\n        try {\n            return jwt.verify(token, process.env.JWT_SECRET || \"default-secret\");\n        } catch (error) {\n            return false;\n        }\n    }\n\n    async getUserFromToken(token: string) {\n        const decoded = jwt.verify(token, process.env.JWT_SECRET || \"default-secret\");\n\n        if (typeof decoded === \"string\") {\n            return null;\n        }\n\n        return decoded.username;\n    }\n}\n\nexport default new TokenManager();"],"names":[],"mappings":";;;AAAA;;AAEA,MAAM;IACF,MAAM,cAAc,QAAgB,EAAE;QAClC,MAAM,eAAe,uIAAA,CAAA,UAAG,CAAC,IAAI,CAAC;YAAE;QAAS,GAAG,QAAQ,GAAG,CAAC,UAAU,IAAI,kBAAkB;YAAE,WAAW;QAAK;QAE1G,OAAO,uIAAA,CAAA,UAAG,CAAC,IAAI,CAAC;YAAE;YAAU;QAAa,GAAG,QAAQ,GAAG,CAAC,UAAU,IAAI;IAC1E;IAEA,MAAM,YAAY,KAAa,EAAE;QAC7B,IAAI;YACA,OAAO,uIAAA,CAAA,UAAG,CAAC,MAAM,CAAC,OAAO,QAAQ,GAAG,CAAC,UAAU,IAAI;QACvD,EAAE,OAAO,OAAO;YACZ,OAAO;QACX;IACJ;IAEA,MAAM,iBAAiB,KAAa,EAAE;QAClC,MAAM,UAAU,uIAAA,CAAA,UAAG,CAAC,MAAM,CAAC,OAAO,QAAQ,GAAG,CAAC,UAAU,IAAI;QAE5D,IAAI,OAAO,YAAY,UAAU;YAC7B,OAAO;QACX;QAEA,OAAO,QAAQ,QAAQ;IAC3B;AACJ;uCAEe,IAAI","debugId":null}},
    {"offset": {"line": 193, "column": 0}, "map": {"version":3,"sources":["file:///home/laflame/Documents/School-Git/mongo/task3/src/utils/query.ts"],"sourcesContent":["import tokenManager from \"./token-manager\";\nimport db from \"./mongo\";\nimport { UserDetails } from \"@/models/auth\";\nimport { BlogEntry } from \"@/models/blog\";\n\nclass Query {\n    async getUserFromToken(token: string) : Promise<UserDetails | null> {\n        const user = await tokenManager.getUserFromToken(token);\n\n        return db.collection(\"users\").findOne({ username: user }) as unknown as UserDetails;\n    }\n\n    async getPostsByUserId(userId: string) : Promise<BlogEntry[]> {\n        return db.collection(\"posts\").find({ userId }).toArray() as unknown as BlogEntry[];\n    }\n}\n\nexport default new Query();"],"names":[],"mappings":";;;AAAA;AACA;;;AAIA,MAAM;IACF,MAAM,iBAAiB,KAAa,EAAgC;QAChE,MAAM,OAAO,MAAM,kIAAA,CAAA,UAAY,CAAC,gBAAgB,CAAC;QAEjD,OAAO,uHAAA,CAAA,UAAE,CAAC,UAAU,CAAC,SAAS,OAAO,CAAC;YAAE,UAAU;QAAK;IAC3D;IAEA,MAAM,iBAAiB,MAAc,EAAyB;QAC1D,OAAO,uHAAA,CAAA,UAAE,CAAC,UAAU,CAAC,SAAS,IAAI,CAAC;YAAE;QAAO,GAAG,OAAO;IAC1D;AACJ;uCAEe,IAAI","debugId":null}},
    {"offset": {"line": 220, "column": 0}, "map": {"version":3,"sources":["file:///home/laflame/Documents/School-Git/mongo/task3/src/app/api/v1/posts/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from \"next/server\";\nimport PostManager from \"@/utils/post-manager\";\nimport { cookies } from \"next/headers\";\nimport Query from \"@/utils/query\";\nimport { BlogEntryCreationData } from \"@/models/blog\";\nimport blogManager from \"@/utils/client/blog-manager\";\n\nexport async function POST(request: NextRequest) {\n    const cookieStore = await cookies();\n    const token = cookieStore.get(\"token\");\n\n    const user = await Query.getUserFromToken(token!.value);\n\n    const post : BlogEntryCreationData = await request.json();\n    const createdPost = await PostManager.createPost(post, user!);\n    return NextResponse.json(createdPost, { status: 201 });\n}"],"names":[],"mappings":";;;AAAA;AACA;AACA;AACA;;;;;AAIO,eAAe,KAAK,OAAoB;IAC3C,MAAM,cAAc,MAAM,CAAA,GAAA,iIAAA,CAAA,UAAO,AAAD;IAChC,MAAM,QAAQ,YAAY,GAAG,CAAC;IAE9B,MAAM,OAAO,MAAM,uHAAA,CAAA,UAAK,CAAC,gBAAgB,CAAC,MAAO,KAAK;IAEtD,MAAM,OAA+B,MAAM,QAAQ,IAAI;IACvD,MAAM,cAAc,MAAM,iIAAA,CAAA,UAAW,CAAC,UAAU,CAAC,MAAM;IACvD,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC,aAAa;QAAE,QAAQ;IAAI;AACxD","debugId":null}}]
}
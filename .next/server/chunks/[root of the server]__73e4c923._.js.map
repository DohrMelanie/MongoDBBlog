{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 68, "column": 0}, "map": {"version":3,"sources":["file:///home/laflame/Documents/School-Git/mongo/task3/src/utils/mongo.ts"],"sourcesContent":["import { MongoClient } from \"mongodb\";\n\nconst uri = process.env.MONGODB_URI || \"mongodb://localhost:27017\";\nconst client = new MongoClient(uri);\nconst db = client.db(\"blog\");\n\nexport default db;"],"names":[],"mappings":";;;AAAA;;AAEA,MAAM,MAAM,QAAQ,GAAG,CAAC,WAAW,IAAI;AACvC,MAAM,SAAS,IAAI,uGAAA,CAAA,cAAW,CAAC;AAC/B,MAAM,KAAK,OAAO,EAAE,CAAC;uCAEN","debugId":null}},
    {"offset": {"line": 83, "column": 0}, "map": {"version":3,"sources":["file:///home/laflame/Documents/School-Git/mongo/task3/src/utils/code-manager.ts"],"sourcesContent":["import db from \"./mongo\";\n\nclass CodeManager {\n    async generateCode(username: string) {\n        const code = Math.floor(100000 + Math.random() * 900000).toString();\n\n        await db.collection(\"codes\").insertOne({ username, code });\n\n        return code;\n    }\n\n    async verifyCode(username: string, code: string) {\n        const result = await db.collection(\"codes\").findOne({ username, code });\n\n        return result !== null;\n    }\n\n    async deleteCode(username: string) {\n        await db.collection(\"codes\").deleteOne({ username });\n    }\n}\n\nexport default new CodeManager();"],"names":[],"mappings":";;;AAAA;;AAEA,MAAM;IACF,MAAM,aAAa,QAAgB,EAAE;QACjC,MAAM,OAAO,KAAK,KAAK,CAAC,SAAS,KAAK,MAAM,KAAK,QAAQ,QAAQ;QAEjE,MAAM,uHAAA,CAAA,UAAE,CAAC,UAAU,CAAC,SAAS,SAAS,CAAC;YAAE;YAAU;QAAK;QAExD,OAAO;IACX;IAEA,MAAM,WAAW,QAAgB,EAAE,IAAY,EAAE;QAC7C,MAAM,SAAS,MAAM,uHAAA,CAAA,UAAE,CAAC,UAAU,CAAC,SAAS,OAAO,CAAC;YAAE;YAAU;QAAK;QAErE,OAAO,WAAW;IACtB;IAEA,MAAM,WAAW,QAAgB,EAAE;QAC/B,MAAM,uHAAA,CAAA,UAAE,CAAC,UAAU,CAAC,SAAS,SAAS,CAAC;YAAE;QAAS;IACtD;AACJ;uCAEe,IAAI","debugId":null}},
    {"offset": {"line": 117, "column": 0}, "map": {"version":3,"sources":["file:///home/laflame/Documents/School-Git/mongo/task3/src/utils/token-manager.ts"],"sourcesContent":["type TokenPayload = {\n    username: string;\n    refreshToken?: string;\n    exp?: number;\n};\n\nclass TokenManager {\n    private async generateKey() {\n        const encoder = new TextEncoder();\n        const keyData = encoder.encode(process.env.JWT_SECRET || \"default-secret\");\n        return await crypto.subtle.importKey(\n            \"raw\",\n            keyData,\n            { name: \"HMAC\", hash: \"SHA-256\" },\n            false,\n            [\"sign\", \"verify\"]\n        );\n    }\n\n    private async signData(data: TokenPayload) {\n        const encoder = new TextEncoder();\n        const key = await this.generateKey();\n        const payload = encoder.encode(JSON.stringify(data));\n        const signature = await crypto.subtle.sign(\n            \"HMAC\",\n            key,\n            payload\n        );\n        return Buffer.from(signature).toString('base64url');\n    }\n\n    private async verifySignature(token: string, payload: string) {\n        const key = await this.generateKey();\n        const signature = Buffer.from(token, 'base64url');\n        const data = new TextEncoder().encode(payload);\n        return await crypto.subtle.verify(\n            \"HMAC\",\n            key,\n            signature,\n            data\n        );\n    }\n\n    async generateToken(username: string) {\n        const refreshToken = {\n            username,\n            exp: Math.floor(Date.now() / 1000) + (24 * 60 * 60) // 1 day\n        };\n        \n        const payload: TokenPayload = {\n            username,\n            refreshToken: await this.signData(refreshToken)\n        };\n        \n        return await this.signData(payload);\n    }\n\n    async verifyToken(token: string) {\n        try {\n            const [headerB64, payloadB64, signature] = token.split('.');\n            const payload = Buffer.from(payloadB64, 'base64url').toString();\n            const data: TokenPayload = JSON.parse(payload);\n            \n            const isValid = await this.verifySignature(signature, payload);\n\n            if (!isValid) return false;\n            \n            if (data.exp && data.exp < Math.floor(Date.now() / 1000)) {\n                return false;\n            }\n            \n            return data;\n        } catch (error) {\n            console.log(error);\n            return false;\n        }\n    }\n\n    async getUserFromToken(token: string) {\n        const result = await this.verifyToken(token);\n        if (!result) return null;\n        return (result as TokenPayload).username;\n    }\n}\n\nexport default new TokenManager();"],"names":[],"mappings":";;;AAMA,MAAM;IACF,MAAc,cAAc;QACxB,MAAM,UAAU,IAAI;QACpB,MAAM,UAAU,QAAQ,MAAM,CAAC,QAAQ,GAAG,CAAC,UAAU,IAAI;QACzD,OAAO,MAAM,OAAO,MAAM,CAAC,SAAS,CAChC,OACA,SACA;YAAE,MAAM;YAAQ,MAAM;QAAU,GAChC,OACA;YAAC;YAAQ;SAAS;IAE1B;IAEA,MAAc,SAAS,IAAkB,EAAE;QACvC,MAAM,UAAU,IAAI;QACpB,MAAM,MAAM,MAAM,IAAI,CAAC,WAAW;QAClC,MAAM,UAAU,QAAQ,MAAM,CAAC,KAAK,SAAS,CAAC;QAC9C,MAAM,YAAY,MAAM,OAAO,MAAM,CAAC,IAAI,CACtC,QACA,KACA;QAEJ,OAAO,OAAO,IAAI,CAAC,WAAW,QAAQ,CAAC;IAC3C;IAEA,MAAc,gBAAgB,KAAa,EAAE,OAAe,EAAE;QAC1D,MAAM,MAAM,MAAM,IAAI,CAAC,WAAW;QAClC,MAAM,YAAY,OAAO,IAAI,CAAC,OAAO;QACrC,MAAM,OAAO,IAAI,cAAc,MAAM,CAAC;QACtC,OAAO,MAAM,OAAO,MAAM,CAAC,MAAM,CAC7B,QACA,KACA,WACA;IAER;IAEA,MAAM,cAAc,QAAgB,EAAE;QAClC,MAAM,eAAe;YACjB;YACA,KAAK,KAAK,KAAK,CAAC,KAAK,GAAG,KAAK,QAAS,KAAK,KAAK,GAAI,QAAQ;QAChE;QAEA,MAAM,UAAwB;YAC1B;YACA,cAAc,MAAM,IAAI,CAAC,QAAQ,CAAC;QACtC;QAEA,OAAO,MAAM,IAAI,CAAC,QAAQ,CAAC;IAC/B;IAEA,MAAM,YAAY,KAAa,EAAE;QAC7B,IAAI;YACA,MAAM,CAAC,WAAW,YAAY,UAAU,GAAG,MAAM,KAAK,CAAC;YACvD,MAAM,UAAU,OAAO,IAAI,CAAC,YAAY,aAAa,QAAQ;YAC7D,MAAM,OAAqB,KAAK,KAAK,CAAC;YAEtC,MAAM,UAAU,MAAM,IAAI,CAAC,eAAe,CAAC,WAAW;YAEtD,IAAI,CAAC,SAAS,OAAO;YAErB,IAAI,KAAK,GAAG,IAAI,KAAK,GAAG,GAAG,KAAK,KAAK,CAAC,KAAK,GAAG,KAAK,OAAO;gBACtD,OAAO;YACX;YAEA,OAAO;QACX,EAAE,OAAO,OAAO;YACZ,QAAQ,GAAG,CAAC;YACZ,OAAO;QACX;IACJ;IAEA,MAAM,iBAAiB,KAAa,EAAE;QAClC,MAAM,SAAS,MAAM,IAAI,CAAC,WAAW,CAAC;QACtC,IAAI,CAAC,QAAQ,OAAO;QACpB,OAAO,AAAC,OAAwB,QAAQ;IAC5C;AACJ;uCAEe,IAAI","debugId":null}},
    {"offset": {"line": 193, "column": 0}, "map": {"version":3,"sources":["file:///home/laflame/Documents/School-Git/mongo/task3/src/utils/auth.ts"],"sourcesContent":["import { UserCreationData, UserDetails } from \"@/models/auth\";\nimport db from \"./mongo\";\nimport { createHash } from \"crypto\";\n\nclass AuthManager {\n    async addUser(user: UserCreationData) {\n        const hash = createHash(\"sha256\").update(user.password).digest(\"hex\");\n\n        await db.collection(\"users\").insertOne({ username: user.username, password: hash, email: user.email, name: user.name, isVerified: false });\n    }\n\n    async verifyUserAccount(username: string) {\n        await db.collection(\"users\").updateOne({ username }, { $set: { isVerified: true } });\n    }\n\n    async verifyUser(username: string, password: string) {\n        const user = await db.collection(\"users\").findOne({ username });\n\n        if (!user) {\n            return false;\n        }\n\n        const hash = createHash(\"sha256\").update(password).digest(\"hex\");\n\n        return user.password === hash;\n    }\n\n    async getUserDetails(username: string) : Promise<UserDetails | null> {\n        return await db.collection(\"users\").findOne({ username }, { projection: { password: 0 } }) as UserDetails | null;\n    }\n}\n\nexport default new AuthManager();"],"names":[],"mappings":";;;AACA;AACA;;;AAEA,MAAM;IACF,MAAM,QAAQ,IAAsB,EAAE;QAClC,MAAM,OAAO,CAAA,GAAA,qGAAA,CAAA,aAAU,AAAD,EAAE,UAAU,MAAM,CAAC,KAAK,QAAQ,EAAE,MAAM,CAAC;QAE/D,MAAM,uHAAA,CAAA,UAAE,CAAC,UAAU,CAAC,SAAS,SAAS,CAAC;YAAE,UAAU,KAAK,QAAQ;YAAE,UAAU;YAAM,OAAO,KAAK,KAAK;YAAE,MAAM,KAAK,IAAI;YAAE,YAAY;QAAM;IAC5I;IAEA,MAAM,kBAAkB,QAAgB,EAAE;QACtC,MAAM,uHAAA,CAAA,UAAE,CAAC,UAAU,CAAC,SAAS,SAAS,CAAC;YAAE;QAAS,GAAG;YAAE,MAAM;gBAAE,YAAY;YAAK;QAAE;IACtF;IAEA,MAAM,WAAW,QAAgB,EAAE,QAAgB,EAAE;QACjD,MAAM,OAAO,MAAM,uHAAA,CAAA,UAAE,CAAC,UAAU,CAAC,SAAS,OAAO,CAAC;YAAE;QAAS;QAE7D,IAAI,CAAC,MAAM;YACP,OAAO;QACX;QAEA,MAAM,OAAO,CAAA,GAAA,qGAAA,CAAA,aAAU,AAAD,EAAE,UAAU,MAAM,CAAC,UAAU,MAAM,CAAC;QAE1D,OAAO,KAAK,QAAQ,KAAK;IAC7B;IAEA,MAAM,eAAe,QAAgB,EAAgC;QACjE,OAAO,MAAM,uHAAA,CAAA,UAAE,CAAC,UAAU,CAAC,SAAS,OAAO,CAAC;YAAE;QAAS,GAAG;YAAE,YAAY;gBAAE,UAAU;YAAE;QAAE;IAC5F;AACJ;uCAEe,IAAI","debugId":null}},
    {"offset": {"line": 247, "column": 0}, "map": {"version":3,"sources":["file:///home/laflame/Documents/School-Git/mongo/task3/src/app/api/auth/verify/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from \"next/server\";\nimport CodeManager from \"@/utils/code-manager\";\nimport TokenManager from \"@/utils/token-manager\";\nimport AuthManager from \"@/utils/auth\";\nimport { cookies } from \"next/headers\";\ninterface VerificationData {\n    username: string;\n    code: string;\n}\n\nexport async function POST(request: NextRequest) {\n    const { username, code } = await request.json() as VerificationData;\n\n    const isCodeValid = await CodeManager.verifyCode(username, code);\n\n    if (!isCodeValid) {\n        return NextResponse.json({ error: \"Invalid code\" }, { status: 400 });\n    }\n\n    await CodeManager.deleteCode(username);\n    \n    const userData = await AuthManager.getUserDetails(username);\n\n    console.log(userData);\n\n    if (!userData) {\n        return NextResponse.json({ error: \"User not found\" }, { status: 404 });\n    }\n\n    if (!userData.isVerified) {\n        await AuthManager.verifyUserAccount(username);\n    }\n\n    const token = await TokenManager.generateToken(username);\n\n    const cookieStore = await cookies();\n\n    cookieStore.set(\"token\", token, {\n        httpOnly: true,\n        secure: process.env.NODE_ENV === \"production\",\n        maxAge: 60 * 60 * 24 * 30,\n        path: \"/\",\n    });\n\n    return NextResponse.json({ message: \"User verified successfully\" }, { status: 200 });\n}"],"names":[],"mappings":";;;AAAA;AACA;AACA;AACA;AACA;;;;;;AAMO,eAAe,KAAK,OAAoB;IAC3C,MAAM,EAAE,QAAQ,EAAE,IAAI,EAAE,GAAG,MAAM,QAAQ,IAAI;IAE7C,MAAM,cAAc,MAAM,iIAAA,CAAA,UAAW,CAAC,UAAU,CAAC,UAAU;IAE3D,IAAI,CAAC,aAAa;QACd,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,OAAO;QAAe,GAAG;YAAE,QAAQ;QAAI;IACtE;IAEA,MAAM,iIAAA,CAAA,UAAW,CAAC,UAAU,CAAC;IAE7B,MAAM,WAAW,MAAM,sHAAA,CAAA,UAAW,CAAC,cAAc,CAAC;IAElD,QAAQ,GAAG,CAAC;IAEZ,IAAI,CAAC,UAAU;QACX,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,OAAO;QAAiB,GAAG;YAAE,QAAQ;QAAI;IACxE;IAEA,IAAI,CAAC,SAAS,UAAU,EAAE;QACtB,MAAM,sHAAA,CAAA,UAAW,CAAC,iBAAiB,CAAC;IACxC;IAEA,MAAM,QAAQ,MAAM,kIAAA,CAAA,UAAY,CAAC,aAAa,CAAC;IAE/C,MAAM,cAAc,MAAM,CAAA,GAAA,iIAAA,CAAA,UAAO,AAAD;IAEhC,YAAY,GAAG,CAAC,SAAS,OAAO;QAC5B,UAAU;QACV,QAAQ,oDAAyB;QACjC,QAAQ,KAAK,KAAK,KAAK;QACvB,MAAM;IACV;IAEA,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;QAAE,SAAS;IAA6B,GAAG;QAAE,QAAQ;IAAI;AACtF","debugId":null}}]
}
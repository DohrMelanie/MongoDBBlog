{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 68, "column": 0}, "map": {"version":3,"sources":["file:///home/laflame/Documents/School-Git/mongo/task3/src/utils/mongo.ts"],"sourcesContent":["import { MongoClient } from \"mongodb\";\n\nconst uri = process.env.MONGODB_URI || \"mongodb://localhost:27017\";\nconst client = new MongoClient(uri);\nconst db = client.db(\"blog\");\n\nexport default db;"],"names":[],"mappings":";;;AAAA;;AAEA,MAAM,MAAM,QAAQ,GAAG,CAAC,WAAW,IAAI;AACvC,MAAM,SAAS,IAAI,uGAAA,CAAA,cAAW,CAAC;AAC/B,MAAM,KAAK,OAAO,EAAE,CAAC;uCAEN","debugId":null}},
    {"offset": {"line": 83, "column": 0}, "map": {"version":3,"sources":["file:///home/laflame/Documents/School-Git/mongo/task3/src/utils/user-manager.ts"],"sourcesContent":["import { ObjectId } from \"mongodb\";\nimport db from \"./mongo\";\nimport { UserDetails } from \"@/models/auth\";\n\nclass UserManager {\n    public async getUserById(id: ObjectId) {\n        const user = await db.collection(\"users\").findOne({ _id: id });\n\n        if (!user) {\n            throw new Error(\"User not found\");\n        }\n\n        return user as UserDetails;\n    }\n}\n\nconst userManager = new UserManager();\n\nexport default userManager;"],"names":[],"mappings":";;;AACA;;AAGA,MAAM;IACF,MAAa,YAAY,EAAY,EAAE;QACnC,MAAM,OAAO,MAAM,uHAAA,CAAA,UAAE,CAAC,UAAU,CAAC,SAAS,OAAO,CAAC;YAAE,KAAK;QAAG;QAE5D,IAAI,CAAC,MAAM;YACP,MAAM,IAAI,MAAM;QACpB;QAEA,OAAO;IACX;AACJ;AAEA,MAAM,cAAc,IAAI;uCAET","debugId":null}},
    {"offset": {"line": 107, "column": 0}, "map": {"version":3,"sources":["file:///home/laflame/Documents/School-Git/mongo/task3/src/app/api/users/%5Bid%5D/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from \"next/server\";\nimport userManager from \"@/utils/user-manager\";\nimport { ObjectId } from \"mongodb\";\nimport { PublicUserDetailsDto } from \"@/models/dtos\";\n\nexport async function GET(request: NextRequest, { params }: { params: { id: string } }) {\n    const { id } = params;\n\n    const user = await userManager.getUserById(new ObjectId(id));\n\n    if (!user) {\n        return NextResponse.json({ error: \"User not found\" }, { status: 404 });\n    }\n\n    const publicUser: PublicUserDetailsDto = {\n        _id: user._id!,\n        username: user.username,\n        name: user.name,\n    }\n\n    return NextResponse.json(publicUser);\n}"],"names":[],"mappings":";;;AAAA;AACA;AACA;;;;AAGO,eAAe,IAAI,OAAoB,EAAE,EAAE,MAAM,EAA8B;IAClF,MAAM,EAAE,EAAE,EAAE,GAAG;IAEf,MAAM,OAAO,MAAM,iIAAA,CAAA,UAAW,CAAC,WAAW,CAAC,IAAI,uGAAA,CAAA,WAAQ,CAAC;IAExD,IAAI,CAAC,MAAM;QACP,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,OAAO;QAAiB,GAAG;YAAE,QAAQ;QAAI;IACxE;IAEA,MAAM,aAAmC;QACrC,KAAK,KAAK,GAAG;QACb,UAAU,KAAK,QAAQ;QACvB,MAAM,KAAK,IAAI;IACnB;IAEA,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;AAC7B","debugId":null}}]
}
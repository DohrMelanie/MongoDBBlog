{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 60, "column": 0}, "map": {"version":3,"sources":["file:///home/laflame/Documents/School-Git/mongo/task3/src/utils/code-manager.ts"],"sourcesContent":["class CodeManager {\n    private codes: Map<string, string>;\n\n    constructor() {\n        this.codes = new Map();\n    }\n\n    async generateCode(username: string) {\n        const code = Math.floor(100000 + Math.random() * 900000).toString();\n        this.codes.set(username, code);\n        return code;\n    }\n\n    async verifyCode(username: string, code: string) {\n        return this.codes.get(username) === code;\n    }\n\n    async deleteCode(username: string) {\n        this.codes.delete(username);\n    }\n}\n\nexport default new CodeManager();"],"names":[],"mappings":";;;AAAA,MAAM;IACM,MAA2B;IAEnC,aAAc;QACV,IAAI,CAAC,KAAK,GAAG,IAAI;IACrB;IAEA,MAAM,aAAa,QAAgB,EAAE;QACjC,MAAM,OAAO,KAAK,KAAK,CAAC,SAAS,KAAK,MAAM,KAAK,QAAQ,QAAQ;QACjE,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,UAAU;QACzB,OAAO;IACX;IAEA,MAAM,WAAW,QAAgB,EAAE,IAAY,EAAE;QAC7C,OAAO,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,cAAc;IACxC;IAEA,MAAM,WAAW,QAAgB,EAAE;QAC/B,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC;IACtB;AACJ;uCAEe,IAAI","debugId":null}},
    {"offset": {"line": 119, "column": 0}, "map": {"version":3,"sources":["file:///home/laflame/Documents/School-Git/mongo/task3/src/utils/token-manager.ts"],"sourcesContent":["import jwt from \"jsonwebtoken\";\n\nclass TokenManager {\n    async generateToken(username: string) {\n        const refreshToken = jwt.sign({ username }, process.env.JWT_SECRET || \"default-secret\", { expiresIn: \"1d\" });\n\n        return jwt.sign({ username, refreshToken }, process.env.JWT_SECRET || \"default-secret\");\n    }\n\n    async verifyToken(token: string) {\n        try {\n            return jwt.verify(token, process.env.JWT_SECRET || \"default-secret\");\n        } catch (error) {\n            return false;\n        }\n    }\n\n    async getUserFromToken(token: string) {\n        const decoded = jwt.verify(token, process.env.JWT_SECRET || \"default-secret\");\n\n        if (typeof decoded === \"string\") {\n            return null;\n        }\n\n        return decoded.username;\n    }\n}\n\nexport default new TokenManager();"],"names":[],"mappings":";;;AAAA;;AAEA,MAAM;IACF,MAAM,cAAc,QAAgB,EAAE;QAClC,MAAM,eAAe,uIAAA,CAAA,UAAG,CAAC,IAAI,CAAC;YAAE;QAAS,GAAG,QAAQ,GAAG,CAAC,UAAU,IAAI,kBAAkB;YAAE,WAAW;QAAK;QAE1G,OAAO,uIAAA,CAAA,UAAG,CAAC,IAAI,CAAC;YAAE;YAAU;QAAa,GAAG,QAAQ,GAAG,CAAC,UAAU,IAAI;IAC1E;IAEA,MAAM,YAAY,KAAa,EAAE;QAC7B,IAAI;YACA,OAAO,uIAAA,CAAA,UAAG,CAAC,MAAM,CAAC,OAAO,QAAQ,GAAG,CAAC,UAAU,IAAI;QACvD,EAAE,OAAO,OAAO;YACZ,OAAO;QACX;IACJ;IAEA,MAAM,iBAAiB,KAAa,EAAE;QAClC,MAAM,UAAU,uIAAA,CAAA,UAAG,CAAC,MAAM,CAAC,OAAO,QAAQ,GAAG,CAAC,UAAU,IAAI;QAE5D,IAAI,OAAO,YAAY,UAAU;YAC7B,OAAO;QACX;QAEA,OAAO,QAAQ,QAAQ;IAC3B;AACJ;uCAEe,IAAI","debugId":null}},
    {"offset": {"line": 166, "column": 0}, "map": {"version":3,"sources":["file:///home/laflame/Documents/School-Git/mongo/task3/src/utils/mongo.ts"],"sourcesContent":["import { MongoClient } from \"mongodb\";\n\nconst uri = process.env.MONGODB_URI || \"mongodb://localhost:27017\";\nconst client = new MongoClient(uri);\nconst db = client.db(\"blog\");\n\nexport default db;"],"names":[],"mappings":";;;AAAA;;AAEA,MAAM,MAAM,QAAQ,GAAG,CAAC,WAAW,IAAI;AACvC,MAAM,SAAS,IAAI,uGAAA,CAAA,cAAW,CAAC;AAC/B,MAAM,KAAK,OAAO,EAAE,CAAC;uCAEN","debugId":null}},
    {"offset": {"line": 181, "column": 0}, "map": {"version":3,"sources":["file:///home/laflame/Documents/School-Git/mongo/task3/src/utils/auth.ts"],"sourcesContent":["import { UserCreationData, UserDetails } from \"@/models/auth\";\nimport db from \"./mongo\";\nimport { createHash } from \"crypto\";\n\nclass AuthManager {\n    async addUser(user: UserCreationData) {\n        const hash = createHash(\"sha256\").update(user.password).digest(\"hex\");\n\n        await db.collection(\"users\").insertOne({ username: user.username, password: hash, email: user.email, name: user.name, isVerified: false });\n    }\n\n    async verifyUserAccount(username: string) {\n        await db.collection(\"users\").updateOne({ username }, { $set: { isVerified: true } });\n    }\n\n    async verifyUser(username: string, password: string) {\n        const user = await db.collection(\"users\").findOne({ username });\n\n        if (!user) {\n            return false;\n        }\n\n        const hash = createHash(\"sha256\").update(password).digest(\"hex\");\n\n        return user.password === hash;\n    }\n\n    async getUserDetails(username: string) : Promise<UserDetails | null> {\n        return await db.collection(\"users\").findOne({ username }, { projection: { password: 0 } }) as UserDetails | null;\n    }\n}\n\nexport default new AuthManager();"],"names":[],"mappings":";;;AACA;AACA;;;AAEA,MAAM;IACF,MAAM,QAAQ,IAAsB,EAAE;QAClC,MAAM,OAAO,CAAA,GAAA,qGAAA,CAAA,aAAU,AAAD,EAAE,UAAU,MAAM,CAAC,KAAK,QAAQ,EAAE,MAAM,CAAC;QAE/D,MAAM,uHAAA,CAAA,UAAE,CAAC,UAAU,CAAC,SAAS,SAAS,CAAC;YAAE,UAAU,KAAK,QAAQ;YAAE,UAAU;YAAM,OAAO,KAAK,KAAK;YAAE,MAAM,KAAK,IAAI;YAAE,YAAY;QAAM;IAC5I;IAEA,MAAM,kBAAkB,QAAgB,EAAE;QACtC,MAAM,uHAAA,CAAA,UAAE,CAAC,UAAU,CAAC,SAAS,SAAS,CAAC;YAAE;QAAS,GAAG;YAAE,MAAM;gBAAE,YAAY;YAAK;QAAE;IACtF;IAEA,MAAM,WAAW,QAAgB,EAAE,QAAgB,EAAE;QACjD,MAAM,OAAO,MAAM,uHAAA,CAAA,UAAE,CAAC,UAAU,CAAC,SAAS,OAAO,CAAC;YAAE;QAAS;QAE7D,IAAI,CAAC,MAAM;YACP,OAAO;QACX;QAEA,MAAM,OAAO,CAAA,GAAA,qGAAA,CAAA,aAAU,AAAD,EAAE,UAAU,MAAM,CAAC,UAAU,MAAM,CAAC;QAE1D,OAAO,KAAK,QAAQ,KAAK;IAC7B;IAEA,MAAM,eAAe,QAAgB,EAAgC;QACjE,OAAO,MAAM,uHAAA,CAAA,UAAE,CAAC,UAAU,CAAC,SAAS,OAAO,CAAC;YAAE;QAAS,GAAG;YAAE,YAAY;gBAAE,UAAU;YAAE;QAAE;IAC5F;AACJ;uCAEe,IAAI","debugId":null}},
    {"offset": {"line": 235, "column": 0}, "map": {"version":3,"sources":["file:///home/laflame/Documents/School-Git/mongo/task3/src/app/api/auth/verify/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from \"next/server\";\nimport CodeManager from \"@/utils/code-manager\";\nimport TokenManager from \"@/utils/token-manager\";\nimport AuthManager from \"@/utils/auth\";\n\ninterface VerificationData {\n    username: string;\n    code: string;\n}\n\nexport async function POST(request: NextRequest) {\n    const { username, code } = await request.json() as VerificationData;\n\n    const isCodeValid = await CodeManager.verifyCode(username, code);\n\n    if (!isCodeValid) {\n        return NextResponse.json({ error: \"Invalid code\" }, { status: 400 });\n    }\n\n    await CodeManager.deleteCode(username);\n    \n    const userData = await AuthManager.getUserDetails(username);\n\n    console.log(userData);\n\n    if (!userData) {\n        return NextResponse.json({ error: \"User not found\" }, { status: 404 });\n    }\n\n    if (!userData.isVerified) {\n        await AuthManager.verifyUserAccount(username);\n    }\n\n    const token = await TokenManager.generateToken(username);\n\n    request.cookies.set(\"token\", token);\n\n    return NextResponse.json({ message: \"User verified successfully\" }, { status: 200 });\n}"],"names":[],"mappings":";;;AAAA;AACA;AACA;AACA;;;;;AAOO,eAAe,KAAK,OAAoB;IAC3C,MAAM,EAAE,QAAQ,EAAE,IAAI,EAAE,GAAG,MAAM,QAAQ,IAAI;IAE7C,MAAM,cAAc,MAAM,iIAAA,CAAA,UAAW,CAAC,UAAU,CAAC,UAAU;IAE3D,IAAI,CAAC,aAAa;QACd,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,OAAO;QAAe,GAAG;YAAE,QAAQ;QAAI;IACtE;IAEA,MAAM,iIAAA,CAAA,UAAW,CAAC,UAAU,CAAC;IAE7B,MAAM,WAAW,MAAM,sHAAA,CAAA,UAAW,CAAC,cAAc,CAAC;IAElD,QAAQ,GAAG,CAAC;IAEZ,IAAI,CAAC,UAAU;QACX,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,OAAO;QAAiB,GAAG;YAAE,QAAQ;QAAI;IACxE;IAEA,IAAI,CAAC,SAAS,UAAU,EAAE;QACtB,MAAM,sHAAA,CAAA,UAAW,CAAC,iBAAiB,CAAC;IACxC;IAEA,MAAM,QAAQ,MAAM,kIAAA,CAAA,UAAY,CAAC,aAAa,CAAC;IAE/C,QAAQ,OAAO,CAAC,GAAG,CAAC,SAAS;IAE7B,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;QAAE,SAAS;IAA6B,GAAG;QAAE,QAAQ;IAAI;AACtF","debugId":null}}]
}
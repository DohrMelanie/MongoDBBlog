{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 31, "column": 0}, "map": {"version":3,"sources":["turbopack:///[project]/src/middleware.ts"],"sourcesContent":["import { NextRequest } from \"next/server\";\nimport { NextResponse } from \"next/server\";\nimport jwt from \"jsonwebtoken\";\n\nexport function middleware(request: NextRequest) {\n  const authHeader = request.headers.get(\"authorization\");\n  \n  if (!authHeader || !authHeader.startsWith(\"Bearer \")) {\n    return NextResponse.json({ error: \"Unauthorized\" }, { status: 401 });\n  }\n\n  const token = authHeader.split(\" \")[1];\n  try {\n    const decoded = jwt.verify(token, process.env.JWT_SECRET || \"default-secret\");\n    if (!decoded) {\n      return NextResponse.json({ error: \"Unauthorized\" }, { status: 401 });\n    }\n  } catch (error) {\n    return NextResponse.json({ error: \"Invalid token\" }, { status: 403 });\n  }\n\n  return NextResponse.next();\n}\n\nexport const config = {\n  matcher: [\n    \"/api/v1/:path*\"\n  ]\n};"],"names":[],"mappings":";;;;AACA;AAAA;AACA;;;AAEO,SAAS,WAAW,OAAoB;IAC7C,MAAM,aAAa,QAAQ,OAAO,CAAC,GAAG,CAAC;IAEvC,IAAI,CAAC,cAAc,CAAC,WAAW,UAAU,CAAC,YAAY;QACpD,OAAO,6LAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,OAAO;QAAe,GAAG;YAAE,QAAQ;QAAI;IACpE;IAEA,MAAM,QAAQ,WAAW,KAAK,CAAC,IAAI,CAAC,EAAE;IACtC,IAAI;QACF,MAAM,UAAU,6IAAA,CAAA,UAAG,CAAC,MAAM,CAAC,OAAO,QAAQ,GAAG,CAAC,UAAU,IAAI;QAC5D,IAAI,CAAC,SAAS;YACZ,OAAO,6LAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBAAE,OAAO;YAAe,GAAG;gBAAE,QAAQ;YAAI;QACpE;IACF,EAAE,OAAO,OAAO;QACd,OAAO,6LAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,OAAO;QAAgB,GAAG;YAAE,QAAQ;QAAI;IACrE;IAEA,OAAO,6LAAA,CAAA,eAAY,CAAC,IAAI;AAC1B;AAEO,MAAM,SAAS;IACpB,SAAS;QACP;KACD;AACH"}}]
}
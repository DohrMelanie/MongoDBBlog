{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 39, "column": 0}, "map": {"version":3,"sources":["turbopack:///[project]/src/utils/mongo.ts"],"sourcesContent":["import { MongoClient } from \"mongodb\";\n\nconst uri = process.env.MONGODB_URI || \"mongodb://localhost:27017\";\nconst client = new MongoClient(uri);\nconst db = client.db(\"blog\");\n\nexport default db;"],"names":[],"mappings":";;;AAAA;;AAEA,MAAM,MAAM,QAAQ,GAAG,CAAC,WAAW,IAAI;AACvC,MAAM,SAAS,IAAI,+IAAA,CAAA,cAAW,CAAC;AAC/B,MAAM,KAAK,OAAO,EAAE,CAAC;uCAEN"}},
    {"offset": {"line": 54, "column": 0}, "map": {"version":3,"sources":["turbopack:///[project]/src/utils/token-manager.ts"],"sourcesContent":["import jwt from \"jsonwebtoken\";\nimport db from \"./mongo\";\n\nclass TokenManager {\n    async generateToken(username: string) {\n        const refreshToken = jwt.sign({ username }, process.env.JWT_SECRET || \"default-secret\", { expiresIn: \"1d\" });\n\n        return jwt.sign({ username, refreshToken }, process.env.JWT_SECRET || \"default-secret\");\n    }\n\n    async verifyToken(token: string) {\n        try {\n            return jwt.verify(token, process.env.JWT_SECRET || \"default-secret\");\n        } catch (error) {\n            return false;\n        }\n    }\n\n    async getUserFromToken(token: string) {\n        const decoded = jwt.verify(token, process.env.JWT_SECRET || \"default-secret\");\n\n        if (typeof decoded === \"string\") {\n            return null;\n        }\n\n        return db.collection(\"BlogUsers\").findOne({ username: decoded.username });\n    }\n}\n\nexport default new TokenManager();"],"names":[],"mappings":";;;AAAA;AACA;;;AAEA,MAAM;IACF,MAAM,cAAc,QAAgB,EAAE;QAClC,MAAM,eAAe,6IAAA,CAAA,UAAG,CAAC,IAAI,CAAC;YAAE;QAAS,GAAG,QAAQ,GAAG,CAAC,UAAU,IAAI,kBAAkB;YAAE,WAAW;QAAK;QAE1G,OAAO,6IAAA,CAAA,UAAG,CAAC,IAAI,CAAC;YAAE;YAAU;QAAa,GAAG,QAAQ,GAAG,CAAC,UAAU,IAAI;IAC1E;IAEA,MAAM,YAAY,KAAa,EAAE;QAC7B,IAAI;YACA,OAAO,6IAAA,CAAA,UAAG,CAAC,MAAM,CAAC,OAAO,QAAQ,GAAG,CAAC,UAAU,IAAI;QACvD,EAAE,OAAO,OAAO;YACZ,OAAO;QACX;IACJ;IAEA,MAAM,iBAAiB,KAAa,EAAE;QAClC,MAAM,UAAU,6IAAA,CAAA,UAAG,CAAC,MAAM,CAAC,OAAO,QAAQ,GAAG,CAAC,UAAU,IAAI;QAE5D,IAAI,OAAO,YAAY,UAAU;YAC7B,OAAO;QACX;QAEA,OAAO,6HAAA,CAAA,UAAE,CAAC,UAAU,CAAC,aAAa,OAAO,CAAC;YAAE,UAAU,QAAQ,QAAQ;QAAC;IAC3E;AACJ;uCAEe,IAAI"}},
    {"offset": {"line": 97, "column": 0}, "map": {"version":3,"sources":["turbopack:///[project]/src/middleware.ts"],"sourcesContent":["import { NextRequest } from \"next/server\";\nimport { NextResponse } from \"next/server\";\nimport tokenManager from \"./utils/token-manager\";\nimport { JwtPayload } from \"jsonwebtoken\";\nexport async function middleware(request: NextRequest) {\n  const cookie = request.cookies.get(\"token\");\n\n  if (!cookie) {\n    return NextResponse.json({ error: \"Unauthorized\" }, { status: 401 });\n  }\n\n  const token = await fetch(request.nextUrl.origin + \"/api/auth/verify\", {\n    method: \"GET\",\n    headers: {\n      \"Cookie\": `token=${cookie.value}`\n    }\n  });\n\n  const tokenData : JwtPayload = await token.json();\n\n  if (!tokenData) {\n    return NextResponse.json({ error: \"Unauthorized\" }, { status: 401 });\n  }\n  \n  if(typeof tokenData === \"string\") {\n    return NextResponse.json({ error: \"Unauthorized\" }, { status: 401 });\n  }\n\n  if(tokenData.exp && tokenData.exp < Date.now() / 1000) {\n    const refreshToken = await fetch(request.nextUrl.origin + \"/api/auth/verify\", {\n      method: \"GET\",\n      headers: {\n        \"Cookie\": `token=${tokenData.refreshToken}`\n      }\n    });\n\n    const refreshTokenData : JwtPayload = await refreshToken.json();\n\n    if(!refreshTokenData) {\n      return NextResponse.json({ error: \"Unauthorized\" }, { status: 401 });\n    }\n\n    if(typeof refreshTokenData === \"string\") {\n      return NextResponse.json({ error: \"Unauthorized\" }, { status: 401 });\n    }\n\n    if(refreshTokenData.exp && refreshTokenData.exp < Date.now() / 1000) {\n      return NextResponse.json({ error: \"Unauthorized\" }, { status: 401 });\n    }\n\n    const newToken = await tokenManager.generateToken(refreshTokenData.username);\n\n    request.cookies.set(\"token\", newToken);\n\n    return NextResponse.next();\n  }\n  \n  return NextResponse.next();\n}\n\nexport const config = {\n  matcher: [\n    \"/api/v1/:path*\"\n  ]\n};"],"names":[],"mappings":";;;;AACA;AAAA;AACA;;;AAEO,eAAe,WAAW,OAAoB;IACnD,MAAM,SAAS,QAAQ,OAAO,CAAC,GAAG,CAAC;IAEnC,IAAI,CAAC,QAAQ;QACX,OAAO,6LAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,OAAO;QAAe,GAAG;YAAE,QAAQ;QAAI;IACpE;IAEA,MAAM,QAAQ,MAAM,MAAM,QAAQ,OAAO,CAAC,MAAM,GAAG,oBAAoB;QACrE,QAAQ;QACR,SAAS;YACP,UAAU,CAAC,MAAM,EAAE,OAAO,KAAK,EAAE;QACnC;IACF;IAEA,MAAM,YAAyB,MAAM,MAAM,IAAI;IAE/C,IAAI,CAAC,WAAW;QACd,OAAO,6LAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,OAAO;QAAe,GAAG;YAAE,QAAQ;QAAI;IACpE;IAEA,IAAG,OAAO,cAAc,UAAU;QAChC,OAAO,6LAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,OAAO;QAAe,GAAG;YAAE,QAAQ;QAAI;IACpE;IAEA,IAAG,UAAU,GAAG,IAAI,UAAU,GAAG,GAAG,KAAK,GAAG,KAAK,MAAM;QACrD,MAAM,eAAe,MAAM,MAAM,QAAQ,OAAO,CAAC,MAAM,GAAG,oBAAoB;YAC5E,QAAQ;YACR,SAAS;gBACP,UAAU,CAAC,MAAM,EAAE,UAAU,YAAY,EAAE;YAC7C;QACF;QAEA,MAAM,mBAAgC,MAAM,aAAa,IAAI;QAE7D,IAAG,CAAC,kBAAkB;YACpB,OAAO,6LAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBAAE,OAAO;YAAe,GAAG;gBAAE,QAAQ;YAAI;QACpE;QAEA,IAAG,OAAO,qBAAqB,UAAU;YACvC,OAAO,6LAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBAAE,OAAO;YAAe,GAAG;gBAAE,QAAQ;YAAI;QACpE;QAEA,IAAG,iBAAiB,GAAG,IAAI,iBAAiB,GAAG,GAAG,KAAK,GAAG,KAAK,MAAM;YACnE,OAAO,6LAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBAAE,OAAO;YAAe,GAAG;gBAAE,QAAQ;YAAI;QACpE;QAEA,MAAM,WAAW,MAAM,wIAAA,CAAA,UAAY,CAAC,aAAa,CAAC,iBAAiB,QAAQ;QAE3E,QAAQ,OAAO,CAAC,GAAG,CAAC,SAAS;QAE7B,OAAO,6LAAA,CAAA,eAAY,CAAC,IAAI;IAC1B;IAEA,OAAO,6LAAA,CAAA,eAAY,CAAC,IAAI;AAC1B;AAEO,MAAM,SAAS;IACpB,SAAS;QACP;KACD;AACH"}}]
}